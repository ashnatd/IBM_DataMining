# -*- coding: utf-8 -*-
"""Linear Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z4evlpHxO4roDE2NZSnl6XlGNLbeWvg0
"""



import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

# Assuming you have a DataFrame 'walmart_data' with columns: 'Weekly_Sales', 'Temperature', 'Fuel_Price', 'CPI', 'Unemployment'
# Replace 'your_data.csv' with the actual file path or loading method for your dataset.
walmart_data = pd.read_csv('/content/Walmart.csv')

# Features (X) and Target (y)
X = walmart_data[['CPI']]
y = walmart_data['Weekly_Sales']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize linear regression model
model = LinearRegression()

# Train the model
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Create a DataFrame for visualization
scatter_data = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})

# Scatter plot with regression line
plt.figure(figsize=(10, 6))
sns.lmplot(x='Actual', y='Predicted', data=scatter_data, scatter_kws={'s': 20, 'alpha': 0.7}, line_kws={'color': 'red'})
plt.title('Scatter Plot with Regression Line')
plt.xlabel('Actual Weekly Sales')
plt.ylabel('Predicted Weekly Sales')
plt.show()

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt

# Assuming you have a DataFrame 'walmart_data' with columns: 'Weekly_Sales' and 'CPI'
# Replace 'your_data.csv' with the actual file path or loading method for your dataset.
walmart_data = pd.read_csv('/content/Walmart.csv')

# Features (X) and Target (y)
X = walmart_data[['Temperature']]
y = walmart_data['Weekly_Sales']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize linear regression model
model = LinearRegression()

# Train the model
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')

# Plotting scatter plot with regression line
plt.figure(figsize=(10, 6))
plt.scatter(X_test, y_test, color='blue', label='Actual Weekly Sales')
plt.plot(X_test, y_pred, color='red', linewidth=2, label='Linear Regression')
plt.xlabel('CPI')
plt.ylabel('Weekly Sales')
plt.title('Linear Regression: CPI vs Weekly Sales')
plt.legend()
plt.show()

walmart_data = pd.read_csv('/content/Walmart.csv')
walmart_data.head()

X = walmart_data[ 'CPI' ]
y = walmart_data[ 'Weekly_Sales' ]

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split( X, y, train_size = 0.7, test_size = 0.3, random_state = 100 )
X_train.head()

print( X_train.shape )
print( X_test.shape )
print( y_train.shape )
print( y_test.shape )

import statsmodels.api as sm

# Add a constant to get an intercept
X_train_sm = sm.add_constant(X_train)
# Fit the resgression line using 'OLS'
lr = sm.OLS(y_train, X_train_sm).fit()

lr.params

#Performing a summary operation lists out all different parameters of the regression line fitted
print(lr.summary())

# Add a constant to X_test
X_test_sm = sm.add_constant(X_test)
# Predict the y values corresponding to X_test_sm
y_pred = lr.predict(X_test_sm)

y_pred.head()

plt.scatter(X_train, y_train)
plt.plot(X_train, 6.948 + 0.054*X_train, 'r')
plt.show()